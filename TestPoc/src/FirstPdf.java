

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfCopy;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;


public class FirstPdf {
  private static String FILE = "c:/temp/FirstPdf.pdf";
  

  public static void main(String[] args) {
    try {
      Document document = new Document();
     PdfWriter writer = null;
    
    
     FileOutputStream outputStream = new FileOutputStream(FILE);
     DataOutputStream output  = new DataOutputStream(outputStream);
     writer = PdfWriter.getInstance(document, output);
     HeaderAndFooter event = new HeaderAndFooter();     
     writer.setPageEvent(event);
     document.open();
     //addMetaData(document);
     addTitlePage(document);
     // addContent(document);
     document.close();
     writer.close();
     
     
     
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
    document.addTitle("My first PDF");
    document.addSubject("Using iText");
    document.addKeywords("Java, PDF, iText");
    document.addAuthor("Sample_Submitter");
    document.addCreator("Sample_Submitter");
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
   Paragraph preface = new Paragraph();  
    
    addEmptyLine(preface, 1);
    // Lets write a big header
    try {   	
		preface.add(Image.getInstance("c:/temp/logo_lims.png"));
	} catch (MalformedURLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    
    
    //preface.setSpacingAfter(10);
    //preface.setSpacingBefore(10);   
    //preface.setIndentationLeft(130);
    preface.add("Sample Submission Form");
    addEmptyLine(preface,1);
    preface.add("DNA");
    addEmptyLine(preface,1);
    //preface.add(preface1);
    try {
    	Image image  = Image.getInstance("c:/temp/barcode.png");
    	image.scaleAbsolute(20,20);
		preface.add(image);
	} catch (MalformedURLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    preface.add("Sample Batch 834");
    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
    Date date = new Date();
   // System.out.println(dateFormat.format(date));
    addEmptyLine(preface, 1);
    preface.add("Date:"+dateFormat.format(date));
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Project :NGS196"));
    preface.add(new Paragraph("Project Name:Test Project Name"));    
    preface.add(new Paragraph("Project Owner:Catherine Foo"));
    preface.add(new Paragraph("PLEASE PRINT THIS PAGE AND SUBMIT WITH YOUR SAMPLES"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("How to submit DNA for sequencing:"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("1.Confirm the SAM IDs listed at the bottom of this page"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("2.Label your tubes:"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("Tube top: SAM ID"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("Tube side: SAM ID"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("NGS196"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("DNA"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("3.Bring your samples to the drop-off freezer in 41-3165."));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("4.Place your tubes in one of our numbered boxes(on floor near freezer"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("				Write down the box # here:"));
    
    try {
    	Image rectangleImage = Image.getInstance("c:/temp/rectangle.png"); 
    	rectangleImage.scaleAbsolute(30,20);
		preface.add(rectangleImage);
	} catch (MalformedURLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    preface.add(new Paragraph("4.Place your box in the DNA rack on the bottom shelf of the freezer"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("5.Leave this sheet on the clipboard next to the freezer"));    
    //addEmptyLine(preface, 8);
    preface.add(new Paragraph("You are submitting the following 8 samples"));
    addEmptyLine(preface, 1);
  //  preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
      //  redFont));
    preface.add(new Paragraph("1.SAM 1089242		Sample 1"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("2.SAM 1089243		Sample 2"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("3.SAM 1089244		Sample 3"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("4.SAM 1089245		Sample 4"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("5.SAM 1089246		Sample 5"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("6.SAM 1089247		Sample 6"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("7.SAM 1089248		Sample 7"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("8.SAM 1089249		Sample 8"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("For NGS Lab use only"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("Received by:"));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("Initial and date"));
    addEmptyLine(preface, 1);
    document.add(preface);    
    // Start a new page
   // document.newPage();
  }

  /*private static void addContent(Document document) throws DocumentException {
    Anchor anchor = new Anchor("First Chapter", catFont);
    anchor.setName("First Chapter");

    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

    Paragraph subPara = new Paragraph("Subcategory 1", subFont);
    Section subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Hello"));

    subPara = new Paragraph("Subcategory 2", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Paragraph 1"));
    subCatPart.add(new Paragraph("Paragraph 2"));
    subCatPart.add(new Paragraph("Paragraph 3"));

    // Add a list
    createList(subCatPart);
    Paragraph paragraph = new Paragraph();
    addEmptyLine(paragraph, 5);
    subCatPart.add(paragraph);

    // Add a table
    createTable(subCatPart);

    // Now add all this to the document
    document.add(catPart);

    // Next section
    anchor = new Anchor("Second Chapter", catFont);
    anchor.setName("Second Chapter");

    // Second parameter is the number of the chapter
    catPart = new Chapter(new Paragraph(anchor), 1);

    subPara = new Paragraph("Subcategory", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("This is a very important message"));

    // Now add all this to the document
    document.add(catPart);

  }

  private static void createTable(Section subCatPart)
      throws BadElementException {
    PdfPTable table = new PdfPTable(3);

    // t.setBorderColor(BaseColor.GRAY);
    // t.setPadding(4);
    // t.setSpacing(4);
    // t.setBorderWidth(1);

    PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 2"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 3"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    table.setHeaderRows(1);

    table.addCell("1.0");
    table.addCell("1.1");
    table.addCell("1.2");
    table.addCell("2.1");
    table.addCell("2.2");
    table.addCell("2.3");

    subCatPart.add(table);

  }
*/
  private static void createList(Section subCatPart) {
    List list = new List(true, false, 10);
    list.add(new ListItem("First point"));
    list.add(new ListItem("Second point"));
    list.add(new ListItem("Third point"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 